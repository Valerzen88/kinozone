create table if not exists numbers as (
  select 1 as n
  union select 2 as n
  union select 3 as n
  union select 4 as n
  union select 5 as n
  union select 6 as n
  union select 7 as n
  union select 8 as n
  union select 9 as n
  union select 10 as n
  union select 11 as n
  union select 12 as n
  union select 13 as n
  union select 14 as n
  union select 15 as n
  union select 16 as n
  union select 17 as n
  union select 18 as n
  union select 19 as n
  union select 20 as n
  union select 21 as n
  union select 22 as n
  union select 23 as n
  union select 24 as n
  union select 25 as n
  union select 26 as n
  union select 27 as n
  union select 28 as n
  union select 29 as n
  union select 30 as n
  union select 31 as n
  union select 32 as n
  union select 33 as n
  union select 34 as n
  union select 35 as n
  union select 36 as n
  union select 37 as n
  union select 38 as n
  union select 39 as n
  union select 40 as n
  union select 41 as n
  union select 42 as n
  union select 43 as n
  union select 44 as n
  union select 45 as n
  union select 46 as n
  union select 47 as n
  union select 48 as n
  union select 49 as n
  union select 50 as n
);

drop table if exists top_20_serials;create table if not exists top_20_serials as SELECT * FROM films
where ratingAwait is null and nameRu is not null and serial=1 and year<2024 and ratingKinopoisk is not null order by year desc, ratingKinopoiskVoteCount desc limit 48;
drop table if exists top_20;create table if not exists top_20 as SELECT * FROM films 
where nameRu is not null and year<2024 and ratingKinopoisk is not null order by year desc,ratingKinopoiskVoteCount desc limit 48;
drop table if exists genre_serials; create table if not exists genre_serials as select genre_one, count(1) as films_amount from (select nameRu, type, trim(substring_index(substring_index(genre, ',', n), ',', -1)) as genre_one
  from films join numbers on char_length(genre)-char_length(replace(genre, ',', ''))>=n-1) gernes_count
where nameRu is not null and type='TV_SERIES'
group by 1 order by 2 desc;
drop table if exists genre; create table if not exists genre as select genre_one, count(1) as films_amount from (select nameRu, trim(substring_index(substring_index(genre, ',', n), ',', -1)) as genre_one
  from films join numbers on char_length(genre)-char_length(replace(genre, ',', ''))>=n-1) gernes_count
where nameRu is not null 
group by 1 order by 2 desc;
drop table if exists countries; create table if not exists countries as select country, count(1) as films_amount from (select country, nameRu, trim(substring_index(substring_index(country, ',', n), ',', -1)) as country_one
  from films join numbers on char_length(country)-char_length(replace(country, ',', ''))>=n-1) countries_count
  where nameRu is not null 
group by 1 order by 2 desc;
TRUNCATE `years_count`;
INSERT INTO years_count (year, film_amount,keyword) 
VALUES 
(0001,(SELECT count(kinopoiskId) FROM films where (type like '%SERIES' or serial=1) and nameRu is not null and ratingKinopoisk is NOT null and productionStatus is null and year<2024),"all_serials"),
(9999,(SELECT count(kinopoiskId) FROM films where nameRu is not null and ratingKinopoisk is NOT null and productionStatus is null and filmLength is not null and year<2024),"all_films"),
(0019,(SELECT count(kinopoiskId) from films where serial=1 and year=2019 and nameRu is not null and productionStatus is null and ratingKinopoisk is not null),"serials_2019"),
(0020,(SELECT count(kinopoiskId) from films where serial=1 and year=2020 and nameRu is not null and productionStatus is null and ratingKinopoisk is not null),"serials_2020"),
(0021,(SELECT count(kinopoiskId) from films where serial=1 and year=2021 and nameRu is not null and productionStatus is null and ratingKinopoisk is not null),"serials_2021"),
(0022,(SELECT count(kinopoiskId) from films where serial=1 and year=2022 and nameRu is not null and productionStatus is null and ratingKinopoisk is not null),"serials_2022"),
(0023,(SELECT count(kinopoiskId) FROM films where year=2023 and SERIAL=1 and nameRu is not null),"serials_2023"),
(2023,(SELECT count(kinopoiskId) FROM films where year=2023 and SERIAL=0 and nameRu is not null),NULL),
(2022,(SELECT count(kinopoiskId) FROM films where YEAR=2022 and nameRu is not null and productionStatus is null and ratingKinopoisk is not null),NULL),
(2021,(SELECT count(kinopoiskId) FROM films where year=2021 and nameRu is not null and productionStatus is null and ratingKinopoisk is not null),NULL),
(2020,(SELECT count(kinopoiskId) FROM films where year=2020 and nameRu is not null and productionStatus is null and ratingKinopoisk is not null),NULL),
(2019,(SELECT count(kinopoiskId) FROM films where year=2019 and nameRu is not null and productionStatus is null and ratingKinopoisk is not null),NULL);
TRUNCATE `related`;
INSERT INTO `related`(`kinopoiskId`, `nameRu`, `nameOriginal`, `ratingKinopoisk`, `ratingImdb`, `year`, `filmLength`, `genre`, `country`) 
SELECT kinopoiskId,nameRu,nameOriginal,ratingKinopoisk,ratingImdb,year,filmLength,genre,country FROM films where nameRu is not null and year<2024 and ratingKinopoisk is not null order by year desc, ratingImdbVoteCount desc, ratingKinopoiskVoteCount desc limit 2048

CREATE TABLE `films_new` (
	`id` BIGINT(19) NOT NULL AUTO_INCREMENT,
	`kinopoiskId` BIGINT(19) NOT NULL,
	`imdbId` TEXT NULL DEFAULT NULL COLLATE 'utf8mb4_unicode_ci',
	`nameRu` TEXT NULL DEFAULT NULL COLLATE 'utf8mb4_unicode_ci',
	`nameEn` VARCHAR(120) NULL DEFAULT NULL COLLATE 'utf8mb4_unicode_ci',
	`nameOriginal` TEXT NULL DEFAULT NULL COLLATE 'utf8mb4_unicode_ci',
	`posterUrl` TEXT NULL DEFAULT NULL COLLATE 'utf8mb4_unicode_ci',
	`posterUrlPreview` TEXT NULL DEFAULT NULL COLLATE 'utf8mb4_unicode_ci',
	`reviewsCount` BIGINT(19) NULL DEFAULT NULL,
	`ratingGoodReview` DOUBLE NULL DEFAULT NULL,
	`ratingGoodReviewVoteCount` BIGINT(19) NULL DEFAULT NULL,
	`ratingKinopoisk` DOUBLE NULL DEFAULT NULL,
	`ratingKinopoiskVoteCount` BIGINT(19) NULL DEFAULT NULL,
	`ratingImdb` DOUBLE NULL DEFAULT NULL,
	`ratingImdbVoteCount` BIGINT(19) NULL DEFAULT NULL,
	`ratingFilmCritics` DOUBLE NULL DEFAULT NULL,
	`ratingFilmCriticsVoteCount` BIGINT(19) NULL DEFAULT NULL,
	`ratingAwait` VARCHAR(120) NULL DEFAULT NULL COLLATE 'utf8mb4_unicode_ci',
	`ratingAwaitCount` BIGINT(19) NULL DEFAULT NULL,
	`ratingRfCritics` VARCHAR(120) NULL DEFAULT NULL COLLATE 'utf8mb4_unicode_ci',
	`ratingRfCriticsVoteCount` BIGINT(19) NULL DEFAULT NULL,
	`webUrl` TEXT NULL DEFAULT NULL COLLATE 'utf8mb4_unicode_ci',
	`year` BIGINT(19) NULL DEFAULT NULL,
	`filmLength` BIGINT(19) NULL DEFAULT NULL,
	`slogan` TEXT NULL DEFAULT NULL COLLATE 'utf8mb4_unicode_ci',
	`description` TEXT NULL DEFAULT NULL COLLATE 'utf8mb4_unicode_ci',
	`shortDescription` TEXT NULL DEFAULT NULL COLLATE 'utf8mb4_unicode_ci',
	`editorAnnotation` VARCHAR(120) NULL DEFAULT NULL COLLATE 'utf8mb4_unicode_ci',
	`isTicketsAvailable` TINYINT(3) NULL DEFAULT NULL,
	`productionStatus` VARCHAR(120) NULL DEFAULT NULL COLLATE 'utf8mb4_unicode_ci',
	`type` TEXT NULL DEFAULT NULL COLLATE 'utf8mb4_unicode_ci',
	`ratingMpaa` TEXT NULL DEFAULT NULL COLLATE 'utf8mb4_unicode_ci',
	`ratingAgeLimits` TEXT NULL DEFAULT NULL COLLATE 'utf8mb4_unicode_ci',
	`country` TEXT NULL DEFAULT NULL COLLATE 'utf8mb4_unicode_ci',
	`genre` TEXT NULL DEFAULT NULL COLLATE 'utf8mb4_unicode_ci',
	`startYear` VARCHAR(120) NULL DEFAULT NULL COLLATE 'utf8mb4_unicode_ci',
	`endYear` VARCHAR(120) NULL DEFAULT NULL COLLATE 'utf8mb4_unicode_ci',
	`serial` TINYINT(3) NULL DEFAULT NULL,
	`shortFilm` TINYINT(3) NULL DEFAULT NULL,
	`completed` TINYINT(3) NULL DEFAULT NULL,
	`hasImax` TINYINT(3) NULL DEFAULT NULL,
	`has3D` TINYINT(3) NULL DEFAULT NULL,
	`lastSync` DATE NULL DEFAULT NULL,
	`coverUrl` TEXT NULL DEFAULT NULL COLLATE 'utf8mb4_unicode_ci',
	`logoUrl` VARCHAR(120) NULL DEFAULT NULL COLLATE 'utf8mb4_unicode_ci',
	PRIMARY KEY (`id`) USING BTREE,
	UNIQUE INDEX `kinopoiskId` (`kinopoiskId`) USING BTREE,
	INDEX `year` (`year`) USING BTREE,
	INDEX `serial` (`serial`) USING BTREE,
	INDEX `ratingImdbVoteCount` (`ratingImdbVoteCount`) USING BTREE,
	INDEX `productionStatus` (`productionStatus`) USING BTREE,
	INDEX `ratingKinopoisk` (`ratingKinopoisk`) USING BTREE,
	INDEX `ratingKinopoiskVoteCount` (`ratingKinopoiskVoteCount`) USING BTREE,
	FULLTEXT INDEX `films_search` (`nameRu`, `nameOriginal`)
)
COLLATE='utf8mb4_unicode_ci'
ENGINE=MYISAM;


INSERT INTO films_new (kinopoiskId, imdbId, nameRu, nameEn, nameOriginal, posterUrl, posterUrlPreview, reviewsCount, ratingGoodReview, ratingGoodReviewVoteCount, ratingKinopoisk, 
ratingKinopoiskVoteCount, ratingImdb, ratingImdbVoteCount, ratingFilmCritics, ratingFilmCriticsVoteCount, ratingAwait, ratingAwaitCount, ratingRfCritics, ratingRfCriticsVoteCount, 
webUrl, year, filmLength, slogan, description, shortDescription, editorAnnotation, isTicketsAvailable, productionStatus, type, ratingMpaa, ratingAgeLimits, country, genre, 
startYear, endYear, serial, shortFilm, completed, hasImax, has3D, lastSync) SELECT kinopoiskId, imdbId, nameRu, nameEn, nameOriginal, posterUrl, posterUrlPreview, reviewsCount, 
ratingGoodReview, ratingGoodReviewVoteCount, ratingKinopoisk, ratingKinopoiskVoteCount, ratingImdb, ratingImdbVoteCount, ratingFilmCritics, ratingFilmCriticsVoteCount, ratingAwait, 
ratingAwaitCount, ratingRfCritics, ratingRfCriticsVoteCount, webUrl, year, filmLength, slogan, description, shortDescription, editorAnnotation, isTicketsAvailable, productionStatus, 
type, ratingMpaa, ratingAgeLimits, country, genre, startYear, endYear, serial, shortFilm, completed, hasImax, has3D, lastSync 
FROM films where kinopoiskId not in(SELECT kinopoiskId from films_new);
